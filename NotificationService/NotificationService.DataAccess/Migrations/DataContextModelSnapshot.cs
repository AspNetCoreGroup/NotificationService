// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NotificationService.DataAccess;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NotificationService.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NotificationService.Domain.Entities.MessageDeliveryStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MessageDeliveryStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "PENDING",
                            Description = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Code = "SEND",
                            Description = "Sent"
                        },
                        new
                        {
                            Id = 3,
                            Code = "FAIL",
                            Description = "Failed"
                        });
                });

            modelBuilder.Entity("NotificationService.Domain.Entities.MessageTracking", b =>
                {
                    b.Property<long>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MessageId"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MessageDeliveryStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<int>("SubscriptionTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("MessageId");

                    b.HasIndex("MessageDeliveryStatusId");

                    b.HasIndex("SubscriptionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageTrackings");
                });

            modelBuilder.Entity("NotificationService.Domain.Entities.SubscriptionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "TELEGRAM",
                            Description = "Telegram"
                        },
                        new
                        {
                            Id = 2,
                            Code = "EMAIL",
                            Description = "Email"
                        });
                });

            modelBuilder.Entity("NotificationService.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telegram")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TelegramChatId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NotificationService.Domain.Entities.UserSubscription", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("SubscriptionTypeId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "SubscriptionTypeId");

                    b.HasIndex("SubscriptionTypeId");

                    b.ToTable("UserSubscriptions");
                });

            modelBuilder.Entity("NotificationService.Domain.Entities.MessageTracking", b =>
                {
                    b.HasOne("NotificationService.Domain.Entities.MessageDeliveryStatus", "MessageDeliveryStatus")
                        .WithMany("MessageTrackings")
                        .HasForeignKey("MessageDeliveryStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NotificationService.Domain.Entities.SubscriptionType", "SubscriptionType")
                        .WithMany("MessageTrackings")
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NotificationService.Domain.Entities.User", "User")
                        .WithMany("MessageTrackings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageDeliveryStatus");

                    b.Navigation("SubscriptionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NotificationService.Domain.Entities.UserSubscription", b =>
                {
                    b.HasOne("NotificationService.Domain.Entities.SubscriptionType", "SubscriptionType")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NotificationService.Domain.Entities.User", "User")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NotificationService.Domain.Entities.MessageDeliveryStatus", b =>
                {
                    b.Navigation("MessageTrackings");
                });

            modelBuilder.Entity("NotificationService.Domain.Entities.SubscriptionType", b =>
                {
                    b.Navigation("MessageTrackings");

                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("NotificationService.Domain.Entities.User", b =>
                {
                    b.Navigation("MessageTrackings");

                    b.Navigation("UserSubscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
